[server]
host: 0.0.0.0
port: 7125
# The maximum size allowed for a file upload (in MiB).  Default 1024 MiB
max_upload_size: 1024
# Path to klippy Unix Domain Socket
klippy_uds_address: ~/printer_data/comms/klippy.sock

[file_manager]
# post processing for object cancel. Not recommended for low resource SBCs such as a Pi Zero. Default False
enable_object_processing: True

[authorization]
cors_domains:
    https://my.mainsail.xyz
    http://my.mainsail.xyz
    http://*.local
    http://*.lan
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128
    
    # enables partial support of Octoprint API
[octoprint_compat]

# enables moonraker to track and store print history.
[history]

# this enables moonraker announcements for mainsail
[announcements]
subscriptions:
    mainsail
    
    # this enables moonraker's update manager
[update_manager]
refresh_interval: 168
enable_auto_refresh: True

[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager mainsail-config]
type: git_repo
primary_branch: master
path: ~/mainsail-config
origin: https://github.com/mainsail-crew/mainsail-config.git
managed_services: klipper

### moonraker-timelapse
### Don't forget to include timelapse.cfg to your printer.cfg
### Uncomment to enable moonraker-timelapse


[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/mainsail-crew/moonraker-timelapse.git
managed_services: klipper moonraker

[timelapse]
##   Directory where the generated video will be saved
output_path: ~/timelapse/
###   Directory where ffmpeg is installed
ffmpeg_binary_path: /usr/bin/ffmpeg

# Crowsnest update_manager entry
[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest
install_script: tools/pkglist.sh

# Sonar update_manager entry
# [update_manager sonar]
# type: git_repo
# path: ~/sonar
# origin: https://github.com/mainsail-crew/sonar.git
# primary_branch: main
# managed_services: sonar
# install_script: tools/install.sh

[update_manager KlipperScreen]
type: git_repo
path: /home/ton/KlipperScreen
origin: https://github.com/KlipperScreen/KlipperScreen.git
managed_services: KlipperScreen
env: /home/ton/.KlipperScreen-env/bin/python
requirements: /home/ton/KlipperScreen/scripts/KlipperScreen-requirements.txt
install_script: /home/ton/KlipperScreen/scripts/KlipperScreen-install.sh

[update_manager fluidd]
type: web
channel: stable
repo: fluidd-core/fluidd
path: /home/ton/fluidd

[spoolman]
server: http://192.168.1.121:7912
sync_rate: 5

[mqtt]
address: 192.168.1.121
#   Address of the Broker.  This may be a hostname or IP Address.  This
#   parameter must be provided.
port: 1883
#   Port the Broker is listening on.  Default is 1883.
username: 
    #   An optional username used to log in to the Broker.  This option accepts
    #   Jinja2 Templates, see the [secrets] section for details. The default is
    #   no username (an anonymous login will be attempted).
password:
    #   An optional password used to log in to the Broker.  This option accepts
    #   Jinja2 Templates, see the [secrets] section for details.  The default is
    #   no password.
mqtt_protocol: v3.1.1
#   The protocol to use when connecting to the Broker.  May be v3.1,
#   v3.1.1, and v5.  The default is v3.1.1
enable_moonraker_api: True
#   If set to true the MQTT client will subscribe to API topic, ie:
#     {instance_name}/moonraker/api/request
#   This can be set to False if the user does not wish to allow API
#   requests over MQTT.  The default is True.
instance_name: homeassistant/Ender3
#   An identifier used to create unique API topics for each instance of
#   Moonraker on network.  This name cannot contain wildcards (+ or #).
#   For example, if the instance name is set to my_printer, Moonraker
#   will subscribe to the following topic for API requests:
#     my_printer/moonraker/api/request
#   Responses will be published to the following topic:
#     my_printer/moonraker/api/response
#   The default is the machine's hostname.
#status_objects:
#       webhooks
#       toolhead=position,print_time,homed_axes
#       extruder=temperature
#   A newline separated list of Klipper objects whose state will be
#   published.  There are two different ways to publish the states - you
#   can use either or both depending on your need.  See the
#   "publish_split_status" options for details.
#
#   For example, this option could be set as follows:
#
#     status_objects:
#       webhooks
#       toolhead=position,print_time,homed_axes
#       extruder=temperature
#
#   In the example above, all fields of the "webhooks" object will be tracked
#   and changes will be published.  Only the "position", "print_time", and
#   "homed_axes" fields of the "toolhead" will be tracked.  Likewise, only the
#   "temperature" field of the extruder will be tracked. See the
#   "Printer Objects" section of the documentation for an overview of the most
#   common objects available.
#
#   Note that Klipper will only push an update to an object/field if the field
#   has changed.  An object with no fields that have changed will not be part
#   of the payload.  Object state is checked and published roughly every 250 ms.
#
#   If not configured then no objects will be tracked and published to
#   the klipper/status topic.
publish_split_status: False
#   Configures how to publish status updates to MQTT.
#
#   When set to False (default), all Klipper object state updates will be
#   published to a single mqtt state with the following topic:
#     {instance_name}/klipper/status
#
#   When set to True, all Klipper object state updates will be published to
#   separate mqtt topics derived from the object and item in the following
#   format:
#     {instance_name}/klipper/state/{objectname}/{statename}
#
#   The actual value of the state is published as "value" to the topic above.
#   For example, if the heater_bed temperature was 24.0, this is the payload:
#     {"eventtime": {timestamp}, "value": 24.0}
#   It would be published to this topic:
#     {instance_name}/klipper/state/heater_bed/temperature
default_qos: 0
#   The default QOS level used when publishing or subscribing to topics.
#   Must be an integer value from 0 to 2.  The default is 0.
api_qos: 0
#   The QOS level to use for the API topics. If not provided, the
#   value specified by "default_qos" will be used.

[power mqtt_plug]
type: mqtt
command_topic: wifi-relay
# Tasmota uses "on" and "off" as the payload, so our template simply renders
# the command
command_payload:
    {command}
    # There is no need to set the retain flag for Tasmota devices.  Moonraker
    # will use the query topic to initialize the device.  Tasmota will publish
    # all changes in state to the state topic.
retain_command_state: False
# To query a tasmota device we send the command topic without a payload.
# Optionally we could send a "?" as the payload.
query_topic: wifi-relay
# query_payload: ?
state_topic: wifi-relay-state
# The response is either "ON" or "OFF".  Moonraker will handle converting to
# lower case.
state_response_template:
    {payload}
    # Tasmota updates the state topic when the device state changes, so it is not
    # not necessary to query after a command
query_after_command: False

[update_manager klipper-backup]
type: git_repo
path: ~/klipper-backup
origin: https://github.com/Staubgeborener/klipper-backup.git
managed_services: moonraker
primary_branch: main


[update_manager mobileraker]
install_script: /home/ton/mobileraker_companion/scripts/install.sh
requirements: /home/ton/mobileraker_companion/scripts/mobileraker-requirements.txt
env: /home/ton/mobileraker-env/bin/python
managed_services: mobileraker
primary_branch: main
origin: https://github.com/Clon1998/mobileraker_companion.git
path: /home/ton/mobileraker_companion
type: git_repo

[include octoeverywhere-system.cfg]
